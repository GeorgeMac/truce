// DO NOT EDIT.
// This code was generated by Truce.
package {{ .Package }}

import (
"fmt"
"io"
"io/ioutil"
"net/http"
"net/url"
"encoding/json"
"context"
"bytes"
"errors"
"time"
{{ .Imports }}
)

var _ = bytes.Compare
var _ = time.After

type {{.ClientName}} struct {
    client *http.Client
    host *url.URL
}

func New{{.ClientName}}(host string) (*{{.ClientName}}, error) {
    u, err := url.Parse(host)
    if err != nil {
        return nil, err
    }

    return &{{.ClientName}}{client: http.DefaultClient, host: u}, nil
}

{{ define "errorReturn" }}
{{- if .HasReturn -}}
    {{- if .ReturnIsPtr -}}
        return nil, _err
    {{ else }}
	{{- $goType := goType .ReturnType -}}
	{{- if stringHasPrefix $goType "[]" }}
        return nil, _err
	{{- else }}
        return {{ goType .ReturnType }}{}, _err
	{{- end }}
    {{- end }}
{{ else }}
    return _err
{{- end -}}
{{ end }}

{{ $ctxt := . }}
{{- range .Functions }}
func (_c *{{ $ctxt.ClientName }}) {{signature .Definition}} {
    _u, _err := _c.host.Parse({{ pathJoin .Path }})
    if _err != nil {
        {{- template "errorReturn" . -}}
    }

    {{ if ne (len .Query) 0 -}}
    _query := _u.Query()
    {{ range $k, $v := .Query -}}
    _query.Set("{{$k}}", {{$v.ToStringVar}})
    {{ end -}}
    _u.RawQuery = _query.Encode()
    {{- end }}

    var (
        _body io.Reader
        _resp *http.Response
    )

    {{ if ne .BodyVar "" -}}
    _buf := &bytes.Buffer{}
    _body = _buf
    if _err = json.NewEncoder(_buf).Encode({{ .BodyVar }}); _err != nil {
        {{- template "errorReturn" . -}}
    }
    {{- end }}

    _req, _err := http.NewRequest("{{ .Method }}", _u.String(), _body)
    if _err != nil {
        {{- template "errorReturn" . -}}
    }

    _resp, _err = _c.client.Do(_req.WithContext(ctxt))
    if _err != nil {
        {{- template "errorReturn" . -}}
    }

    defer func(){
        _, _ = io.Copy(ioutil.Discard, _resp.Body)
        _ = _resp.Body.Close()
    }()

    if _err = _checkResponse(_resp); _err != nil {
        {{- template "errorReturn" . -}}
    }

    {{ if .HasReturn -}}
    {{ if .ReturnIsPtr -}}
    _rtn := &{{goType  .ReturnType }}{}
	{{ else }}
	var _rtn {{goType  .ReturnType }}
    {{- end }}
    _err = json.NewDecoder(_resp.Body).Decode({{ if not .ReturnIsPtr }}&{{ end }}_rtn)
    return _rtn, _err
    {{ else }}
    return nil
    {{- end -}}
}
{{ end }}

func _checkResponse(resp *http.Response) (error) {
    switch resp.StatusCode {
    case http.StatusOK:
        return nil
    {{ range .Errors -}}
    case {{.StatusCode}}:
        v := {{ .Definition.Name }}{}
        if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
            return err
        }

        return v
    {{ end -}}
    default:
        return errors.New("unexpected status code")
    }
}
