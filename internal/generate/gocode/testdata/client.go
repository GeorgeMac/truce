// DO NOT EDIT.
// This code was generated by Truce.
package example

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
)

var _ = bytes.Compare

type ExampleClient struct {
	client *http.Client
	host   *url.URL
}

func NewExampleClient(host string) (*ExampleClient, error) {
	u, err := url.Parse(host)
	if err != nil {
		return nil, err
	}

	return &ExampleClient{client: http.DefaultClient, host: u}, nil
}

func (_c *ExampleClient) GetPost(ctxt context.Context, id string) (Post, error) {
	_u, _err := _c.host.Parse(fmt.Sprintf("/api/v1/posts/%v", id))
	if _err != nil {
		return
	}

	var (
		_body io.Reader
		_resp *http.Response
	)

	_req, _err := http.NewRequest("GET", _u.String(), _body)
	if _err != nil {

		return Post{}, _err

	}

	_resp, _err = c.client.Do(_req.WithContext(ctxt))
	if _err != nil {

		return Post{}, _err

	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, _resp.Body)
		_ = _resp.Body.Close()
	}()

	if _err = _checkResponse(_resp); _err != nil {

		return Post{}, _err

	}

	_err = json.NewDecoder(resp.Body).Decode(&rtn)
	return _rtn, _err

}
func (_c *ExampleClient) GetPosts(ctxt context.Context) ([]Post, error) {
	_u, _err := _c.host.Parse("/api/v1/posts")
	if _err != nil {
		return
	}

	var (
		_body io.Reader
		_resp *http.Response
	)

	_req, _err := http.NewRequest("GET", _u.String(), _body)
	if _err != nil {

		return []Post{}, _err

	}

	_resp, _err = c.client.Do(_req.WithContext(ctxt))
	if _err != nil {

		return []Post{}, _err

	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, _resp.Body)
		_ = _resp.Body.Close()
	}()

	if _err = _checkResponse(_resp); _err != nil {

		return []Post{}, _err

	}

	_err = json.NewDecoder(resp.Body).Decode(&rtn)
	return _rtn, _err

}
func (_c *ExampleClient) GetUser(ctxt context.Context, id string) (User, error) {
	_u, _err := _c.host.Parse(fmt.Sprintf("/api/v1/users/%v", id))
	if _err != nil {
		return
	}

	var (
		_body io.Reader
		_resp *http.Response
	)

	_req, _err := http.NewRequest("GET", _u.String(), _body)
	if _err != nil {

		return User{}, _err

	}

	_resp, _err = c.client.Do(_req.WithContext(ctxt))
	if _err != nil {

		return User{}, _err

	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, _resp.Body)
		_ = _resp.Body.Close()
	}()

	if _err = _checkResponse(_resp); _err != nil {

		return User{}, _err

	}

	_err = json.NewDecoder(resp.Body).Decode(&rtn)
	return _rtn, _err

}
func (_c *ExampleClient) GetUsers(ctxt context.Context) ([]User, error) {
	_u, _err := _c.host.Parse("/api/v1/users")
	if _err != nil {
		return
	}

	var (
		_body io.Reader
		_resp *http.Response
	)

	_req, _err := http.NewRequest("GET", _u.String(), _body)
	if _err != nil {

		return []User{}, _err

	}

	_resp, _err = c.client.Do(_req.WithContext(ctxt))
	if _err != nil {

		return []User{}, _err

	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, _resp.Body)
		_ = _resp.Body.Close()
	}()

	if _err = _checkResponse(_resp); _err != nil {

		return []User{}, _err

	}

	_err = json.NewDecoder(resp.Body).Decode(&rtn)
	return _rtn, _err

}
func (_c *ExampleClient) PatchPost(ctxt context.Context, id string, post PatchPostRequest) (Post, error) {
	_u, _err := _c.host.Parse(fmt.Sprintf("/api/v1/posts/%v", id))
	if _err != nil {
		return
	}

	var (
		_body io.Reader
		_resp *http.Response
	)

	_buf := &bytes.Buffer{}
	_body = _buf
	if err = json.NewEncoder(_buf).Encode(post); err != nil {
		return
	}

	_req, _err := http.NewRequest("PATCH", _u.String(), _body)
	if _err != nil {

		return Post{}, _err

	}

	_resp, _err = c.client.Do(_req.WithContext(ctxt))
	if _err != nil {

		return Post{}, _err

	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, _resp.Body)
		_ = _resp.Body.Close()
	}()

	if _err = _checkResponse(_resp); _err != nil {

		return Post{}, _err

	}

	_err = json.NewDecoder(resp.Body).Decode(&rtn)
	return _rtn, _err

}
func (_c *ExampleClient) PatchUser(ctxt context.Context, id string, user PatchUserRequest) (User, error) {
	_u, _err := _c.host.Parse(fmt.Sprintf("/api/v1/users/%v", id))
	if _err != nil {
		return
	}

	var (
		_body io.Reader
		_resp *http.Response
	)

	_buf := &bytes.Buffer{}
	_body = _buf
	if err = json.NewEncoder(_buf).Encode(user); err != nil {
		return
	}

	_req, _err := http.NewRequest("PATCH", _u.String(), _body)
	if _err != nil {

		return User{}, _err

	}

	_resp, _err = c.client.Do(_req.WithContext(ctxt))
	if _err != nil {

		return User{}, _err

	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, _resp.Body)
		_ = _resp.Body.Close()
	}()

	if _err = _checkResponse(_resp); _err != nil {

		return User{}, _err

	}

	_err = json.NewDecoder(resp.Body).Decode(&rtn)
	return _rtn, _err

}
func (_c *ExampleClient) PutPost(ctxt context.Context, post PutPostRequest) (Post, error) {
	_u, _err := _c.host.Parse("/api/v1/posts")
	if _err != nil {
		return
	}

	var (
		_body io.Reader
		_resp *http.Response
	)

	_buf := &bytes.Buffer{}
	_body = _buf
	if err = json.NewEncoder(_buf).Encode(post); err != nil {
		return
	}

	_req, _err := http.NewRequest("PUT", _u.String(), _body)
	if _err != nil {

		return Post{}, _err

	}

	_resp, _err = c.client.Do(_req.WithContext(ctxt))
	if _err != nil {

		return Post{}, _err

	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, _resp.Body)
		_ = _resp.Body.Close()
	}()

	if _err = _checkResponse(_resp); _err != nil {

		return Post{}, _err

	}

	_err = json.NewDecoder(resp.Body).Decode(&rtn)
	return _rtn, _err

}
func (_c *ExampleClient) PutUser(ctxt context.Context, user PutUserRequest) (User, error) {
	_u, _err := _c.host.Parse("/api/v1/users")
	if _err != nil {
		return
	}

	var (
		_body io.Reader
		_resp *http.Response
	)

	_buf := &bytes.Buffer{}
	_body = _buf
	if err = json.NewEncoder(_buf).Encode(user); err != nil {
		return
	}

	_req, _err := http.NewRequest("PUT", _u.String(), _body)
	if _err != nil {

		return User{}, _err

	}

	_resp, _err = c.client.Do(_req.WithContext(ctxt))
	if _err != nil {

		return User{}, _err

	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, _resp.Body)
		_ = _resp.Body.Close()
	}()

	if _err = _checkResponse(_resp); _err != nil {

		return User{}, _err

	}

	_err = json.NewDecoder(resp.Body).Decode(&rtn)
	return _rtn, _err

}

func _checkResponse(resp *http.Response) error {
	switch resp.StatusCode {
	case http.StatusOK:
		return nil
	case 401:
		v := NotAuthorized{}
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return err
		}

		return v
	case 404:
		v := NotFound{}
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return err
		}

		return v
	default:
		return errors.New("unexpected status code")
	}
}
