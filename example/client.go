// DO NOT EDIT.
// This code was generated by Truce.
package example

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"time"
)

var _ = bytes.Compare
var _ = time.After

type Client struct {
	client *http.Client
	host   *url.URL
}

func NewClient(host string) (*Client, error) {
	u, err := url.Parse(host)
	if err != nil {
		return nil, err
	}

	return &Client{client: http.DefaultClient, host: u}, nil
}

func (c *Client) DeletePost(ctxt context.Context, id string) error {
	return c.deletePost(ctxt, id)
}

func (c *Client) deletePost(ctxt context.Context, v0 string) error {
	u, err := c.host.Parse(fmt.Sprintf("/api/v1/posts/%v", v0))
	if err != nil {
		return err
	}

	var (
		body io.Reader
		resp *http.Response
	)

	req, err := http.NewRequest("DELETE", u.String(), body)
	if err != nil {
		return err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return err
	}

	return nil
}

func (c *Client) DeleteUser(ctxt context.Context, id string) error {
	return c.deleteUser(ctxt, id)
}

func (c *Client) deleteUser(ctxt context.Context, v0 string) error {
	u, err := c.host.Parse(fmt.Sprintf("/api/v1/users/%v", v0))
	if err != nil {
		return err
	}

	var (
		body io.Reader
		resp *http.Response
	)

	req, err := http.NewRequest("DELETE", u.String(), body)
	if err != nil {
		return err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return err
	}

	return nil
}

func (c *Client) GetPost(ctxt context.Context, id string) (Post, error) {
	return c.getPost(ctxt, id)
}

func (c *Client) getPost(ctxt context.Context, v0 string) (Post, error) {
	u, err := c.host.Parse(fmt.Sprintf("/api/v1/posts/%v", v0))
	if err != nil {
		return Post{}, err
	}

	var (
		body io.Reader
		resp *http.Response
	)

	req, err := http.NewRequest("GET", u.String(), body)
	if err != nil {
		return Post{}, err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return Post{}, err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return Post{}, err
	}

	var rtn Post
	err = json.NewDecoder(resp.Body).Decode(&rtn)
	return rtn, err
}

func (c *Client) GetPosts(ctxt context.Context, limit int64) ([]Post, error) {
	return c.getPosts(ctxt, limit)
}

func (c *Client) getPosts(ctxt context.Context, v0 int64) ([]Post, error) {
	u, err := c.host.Parse("/api/v1/posts")
	if err != nil {
		return nil, err
	}

	query := u.Query()
	query.Set("limit", fmt.Sprintf("%v", v0))
	u.RawQuery = query.Encode()

	var (
		body io.Reader
		resp *http.Response
	)

	req, err := http.NewRequest("GET", u.String(), body)
	if err != nil {
		return nil, err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return nil, err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return nil, err
	}

	var rtn []Post
	err = json.NewDecoder(resp.Body).Decode(&rtn)
	return rtn, err
}

func (c *Client) GetUser(ctxt context.Context, id string) (User, error) {
	return c.getUser(ctxt, id)
}

func (c *Client) getUser(ctxt context.Context, v0 string) (User, error) {
	u, err := c.host.Parse(fmt.Sprintf("/api/v1/users/%v", v0))
	if err != nil {
		return User{}, err
	}

	var (
		body io.Reader
		resp *http.Response
	)

	req, err := http.NewRequest("GET", u.String(), body)
	if err != nil {
		return User{}, err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return User{}, err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return User{}, err
	}

	var rtn User
	err = json.NewDecoder(resp.Body).Decode(&rtn)
	return rtn, err
}

func (c *Client) GetUsers(ctxt context.Context, limit int64) ([]User, error) {
	return c.getUsers(ctxt, limit)
}

func (c *Client) getUsers(ctxt context.Context, v0 int64) ([]User, error) {
	u, err := c.host.Parse("/api/v1/users")
	if err != nil {
		return nil, err
	}

	query := u.Query()
	query.Set("limit", fmt.Sprintf("%v", v0))
	u.RawQuery = query.Encode()

	var (
		body io.Reader
		resp *http.Response
	)

	req, err := http.NewRequest("GET", u.String(), body)
	if err != nil {
		return nil, err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return nil, err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return nil, err
	}

	var rtn []User
	err = json.NewDecoder(resp.Body).Decode(&rtn)
	return rtn, err
}

func (c *Client) PatchPost(ctxt context.Context, id string, post PatchPostRequest) (Post, error) {
	return c.patchPost(ctxt, id, post)
}

func (c *Client) patchPost(ctxt context.Context, v0 string, v1 PatchPostRequest) (Post, error) {
	u, err := c.host.Parse(fmt.Sprintf("/api/v1/posts/%v", v0))
	if err != nil {
		return Post{}, err
	}

	var (
		body io.Reader
		resp *http.Response
	)

	buf := &bytes.Buffer{}
	body = buf
	if err = json.NewEncoder(buf).Encode(v1); err != nil {
		return Post{}, err
	}

	req, err := http.NewRequest("PATCH", u.String(), body)
	if err != nil {
		return Post{}, err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return Post{}, err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return Post{}, err
	}

	var rtn Post
	err = json.NewDecoder(resp.Body).Decode(&rtn)
	return rtn, err
}

func (c *Client) PatchUser(ctxt context.Context, id string, user PatchUserRequest) (User, error) {
	return c.patchUser(ctxt, id, user)
}

func (c *Client) patchUser(ctxt context.Context, v0 string, v1 PatchUserRequest) (User, error) {
	u, err := c.host.Parse(fmt.Sprintf("/api/v1/users/%v", v0))
	if err != nil {
		return User{}, err
	}

	var (
		body io.Reader
		resp *http.Response
	)

	buf := &bytes.Buffer{}
	body = buf
	if err = json.NewEncoder(buf).Encode(v1); err != nil {
		return User{}, err
	}

	req, err := http.NewRequest("PATCH", u.String(), body)
	if err != nil {
		return User{}, err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return User{}, err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return User{}, err
	}

	var rtn User
	err = json.NewDecoder(resp.Body).Decode(&rtn)
	return rtn, err
}

func (c *Client) PutPost(ctxt context.Context, post PutPostRequest) (Post, error) {
	return c.putPost(ctxt, post)
}

func (c *Client) putPost(ctxt context.Context, v0 PutPostRequest) (Post, error) {
	u, err := c.host.Parse("/api/v1/posts")
	if err != nil {
		return Post{}, err
	}

	var (
		body io.Reader
		resp *http.Response
	)

	buf := &bytes.Buffer{}
	body = buf
	if err = json.NewEncoder(buf).Encode(v0); err != nil {
		return Post{}, err
	}

	req, err := http.NewRequest("PUT", u.String(), body)
	if err != nil {
		return Post{}, err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return Post{}, err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return Post{}, err
	}

	var rtn Post
	err = json.NewDecoder(resp.Body).Decode(&rtn)
	return rtn, err
}

func (c *Client) PutUser(ctxt context.Context, user PutUserRequest) (User, error) {
	return c.putUser(ctxt, user)
}

func (c *Client) putUser(ctxt context.Context, v0 PutUserRequest) (User, error) {
	u, err := c.host.Parse("/api/v1/users")
	if err != nil {
		return User{}, err
	}

	var (
		body io.Reader
		resp *http.Response
	)

	buf := &bytes.Buffer{}
	body = buf
	if err = json.NewEncoder(buf).Encode(v0); err != nil {
		return User{}, err
	}

	req, err := http.NewRequest("PUT", u.String(), body)
	if err != nil {
		return User{}, err
	}

	resp, err = c.client.Do(req.WithContext(ctxt))
	if err != nil {
		return User{}, err
	}

	defer func() {
		_, _ = io.Copy(ioutil.Discard, resp.Body)
		_ = resp.Body.Close()
	}()

	if err = checkResponse(resp); err != nil {
		return User{}, err
	}

	var rtn User
	err = json.NewDecoder(resp.Body).Decode(&rtn)
	return rtn, err
}

func checkResponse(resp *http.Response) error {
	switch resp.StatusCode {
	case http.StatusOK:
		return nil
	case 401:
		v := NotAuthorized{}
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return err
		}

		return v
	case 404:
		v := NotFound{}
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return err
		}

		return v
	default:
		return errors.New("unexpected status code")
	}
}
